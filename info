Para comprender bien este tema, primero necesitamos aclarar una cosa: ¿Qué es el DOM? DOM es la sigla para Document Object Model (Modelo de Objeto de Documento) y es una forma estandarizada de representar e interactuar con objetos en documentos HTML y XML. El DOM representa la estructura de un documento a través de un árbol de objetos, donde cada objeto representa una parte del documento.

Entender esta definición ayuda a comprender la importancia de los eventos y cómo funcionan en el DOM (Modelo de Objeto de Documento), siendo esencial para avanzar en tus estudios de JavaScript.

¿Qué es un Evento en el DOM?

Piénsalo como señales que el navegador envía cuando algo sucede, como cuando un usuario hace clic en un botón en tu página web, por ejemplo. Cuando ocurre un evento, tienes la capacidad de reaccionar y ejecutar algunas acciones, como mostrar un mensaje al usuario, cambiar o agregar algún elemento en la página.

El Método addEventListener

Antes de sumergirnos en los diferentes tipos de eventos, vamos a entender rápidamente cómo funciona el método addEventListener. Es un método disponible para todos los elementos HTML y nos permite registrar funciones (callbacks) que se llamarán cuando ocurra un evento específico.

La sintaxis básica es la siguiente:

elemento.addEventListener(evento, callback);
COPIA EL CÓDIGO
Donde:

elemento: Es el elemento HTML al cual queremos asociar el evento.
evento: Es un string que representa el tipo de evento que queremos capturar.
callback: Es la función que se llamará cuando ocurra el evento.
Tipos de Eventos

Eventos de clic (click)
Los eventos de clic son algunos de los más utilizados en el desarrollo web. Ocurren cuando el usuario hace clic en un elemento específico de la página, como un botón, un enlace o incluso una imagen. Podemos usar el evento click para ejecutar acciones cuando el usuario interactúa con estos elementos.

Ejemplo:

// HTML <button id="miBoton">Haz clic aquí</button>

const miBoton = document.getElementById("miBoton");
miBoton.addEventListener("click", function() {
  alert("¡Se ha hecho clic en el botón!");
});
COPIA EL CÓDIGO
Cuando el usuario hace clic en el botón con el texto "Haz clic aquí", se mostrará una alerta con el mensaje "¡Se ha hecho clic en el botón!".

Eventos de envío de formulario (submit)
Cuando tenemos un formulario en nuestra página, podemos usar el evento submit para capturar el envío del formulario por parte del usuario. Esto nos permite realizar acciones como validar los datos ingresados antes de enviarlos al servidor.

Ejemplo:

// HTML
// <form id="miFormulario">
//     <input type="text" name="nombre" />
//     <input type="submit" value="Enviar" />
// </form>

const miFormulario = document.getElementById("miFormulario");
miFormulario.addEventListener("submit", function(event) {
  event.preventDefault(); // Evita el envío estándar del formulario
  const nombre = event.target.elements.nombre.value;
  alert(`Se ha enviado el formulario con el nombre: ${nombre}`);
});
COPIA EL CÓDIGO
Cuando el usuario complete el campo de texto del formulario y haga clic en el botón "Enviar", se mostrará una alerta con el mensaje "Se ha enviado el formulario con el nombre: [nombre ingresado en el campo]".

Eventos de teclado (keydown, keyup, keypress)

Los eventos de teclado nos permiten responder a las acciones del usuario en el teclado, como presionar o soltar una tecla específica. Hay tres tipos principales de eventos de teclado:

keydown: Ocurre cuando se presiona una tecla.
keyup: Ocurre cuando se suelta una tecla.
keypress: Ocurre cuando se presiona una tecla y aún no se ha soltado.
Ejemplo:

// HTML
// <input type="text" id="miInput" />

const miInput = document.getElementById("miInput");
miInput.addEventListener("keydown", function(event) {
  console.log(`Tecla presionada: ${event.key}`);
});
COPIA EL CÓDIGO
Cuando el usuario presione una tecla mientras el cursor esté en el campo de texto, se activará el evento keydown y el código imprimirá en la consola el mensaje "Tecla presionada: [tecla presionada]".

Eventos de enfoque (focus, blur)

Los eventos de enfoque se utilizan cuando queremos capturar cuándo un elemento recibe o pierde el enfoque. El evento focus ocurre cuando el elemento gana el enfoque (por ejemplo, cuando hacemos clic en un campo de formulario), mientras que el evento blur ocurre cuando el elemento pierde el enfoque.

Ejemplo:

// HTML
// <input type="text" id="miCampo" />

const miCampo = document.getElementById("miCampo");
miCampo.addEventListener("focus", function() {
  console.log("El campo ha obtenido el enfoque.");
});

miCampo.addEventListener("blur", function() {
  console.log("El campo ha perdido el enfoque.");
});
COPIA EL CÓDIGO
Cuando el usuario haga clic en el campo de texto, se activará el evento focus y el código imprimirá en la consola el mensaje "El campo ha obtenido el enfoque.". Cuando el usuario haga clic fuera del campo, perdiendo el enfoque, se activará el evento blur y el código imprimirá en la consola el mensaje "El campo ha perdido el enfoque.".

El método addEventListener en JavaScript es una herramienta poderosa para manejar eventos en elementos HTML. A través de los diferentes tipos de eventos disponibles, podemos crear páginas web más interactivas y receptivas, mejorando la experiencia del usuario.

Hemos abordado los eventos más comunes, y hay muchos otros que se pueden explorar para satisfacer las necesidades específicas de cada proyecto. Por lo tanto, el conocimiento sobre eventos y la capacidad de utilizarlos adecuadamente son fundamentales para convertirse en un desarrollador web más eficiente y versátil.

Arrow functions

Hay varias formas de crear una función en Javascript, en este último video les introducimos las arrow functions y acá les dejamos un artículo que va a ayudar a comprender este tipo de función.



JavaScript es un lenguaje de programación ampliamente utilizado para agregar interactividad y dinamismo a las páginas web. Una de las tareas comunes en la manipulación de la interfaz de usuario es la modificación de clases CSS de elementos HTML. Anteriormente, la forma tradicional de hacer esto implicaba manipular la propiedad className, que involucraba trabajar con cadenas y podía propiciar errores. Sin embargo, con la introducción del método classList, a partir de ECMAScript 5, esta tarea se volvió más sencilla y segura.

classList es una propiedad de JavaScript que representa una lista de clases CSS. Proporciona métodos que facilitan la adición, eliminación y verificación de clases, haciendo que la manipulación de clases CSS sea más eficiente y menos propensa a errores de programación.

Además de lo presentado en el vídeo, ¿quieres conocer más formas de usar classList?

Agregando una clase

Para agregar una clase a un elemento HTML, podemos usar el método add() de classList. Este método toma el nombre de la clase como argumento y agrega la clase al elemento, si aún no está presente. Como se muestra a continuación:

const elemento = document.getElementById('miElemento');
elemento.classList.add('miClase');
COPIA EL CÓDIGO
Removiendo una clase

Para quitar una clase de un elemento HTML, podemos utilizar el método remove() de classList. Este método toma el nombre de la clase como argumento y elimina la clase del elemento, si está presente. Mira el ejemplo a continuación:

const elemento = document.getElementById('miElemento');
elemento.classList.remove('miClase');
COPIA EL CÓDIGO
Alternando una clase

El método toggle()de classList permite alternar una clase en un elemento. Si la clase ya está presente en el elemento, el método la quita; de lo contrario, la agrega, como se muestra a continuación:

const elemento = document.getElementById('miElemento');
elemento.classList.toggle('miClase');
COPIA EL CÓDIGO
Verificando si una clase está presente

Para verificar si una clase específica está asociada a un elemento, podemos usar el método contains() de classList, como se muestra en el siguiente ejemplo:

const elemento = document.getElementById('miElemento');
if (elemento.classList.contains('miClase')) {
  // La clase 'miClase' está presente en el elemento
  // Haz algo aquí...
}
COPIA EL CÓDIGO
Reemplazando clases

Como se hizo en clase, podemos reemplazar una clase por otra utilizando los métodos add() y remove() en secuencia.

const elemento = document.getElementById('miElemento');
elemento.classList.remove('claseAntigua');
elemento.classList.add('claseNueva');
COPIA EL CÓDIGO
Manipulando múltiples clases simultáneamente

Es posible agregar o quitar varias clases a la vez usando el método add() o remove() pasando varios argumentos separados por comas. Observa el ejemplo:

const elemento = document.getElementById('miElemento');
elemento.classList.add('clase1', 'clase2', 'clase3');
elemento.classList.remove('clase2', 'clase3');
COPIA EL CÓDIGO
classList en JavaScript es una herramienta poderosa y eficiente para manipular clases CSS en elementos HTML. Con los métodos add(), remove(), toggle(), contains() y otras funcionalidades, podemos realizar tareas de manipulación de clases de manera más segura y simplificada, haciendo que nuestras aplicaciones web sean más interactivas y dinámicas.

Nota: Asegúrate de que JavaScript se cargue después de la renderización del DOM, para que los elementos estén accesibles antes de intentar manipular sus clases.



El JavaScript es un lenguaje de programación ampliamente utilizado para crear interactividad en las páginas web. Una de las funcionalidades más interesantes que ofrece es la capacidad de manipular audio, permitiendo a los desarrolladores agregar y controlar elementos de audio en sus sitios de forma dinámica. Una de las formas más comunes de hacerlo es mediante el uso del objeto 'Audio'.

El objeto 'Audio' es parte de HTML5 y proporciona una interfaz fácil y poderosa para reproducir y controlar archivos de audio en tiempo real. ¿Qué tal explorar su uso, comprendiendo cómo crear, controlar, reproducir y estilizar audio en una página web?

Creando un Objeto 'Audio'

Para crear un nuevo objeto 'Audio', simplemente podemos utilizar la siguiente sintaxis:

const audioElement = new Audio('ruta/del/archivo-de-audio.mp3');
COPIA EL CÓDIGO
Reemplaza 'ruta/del/archivo-de-audio.mp3' por la ruta real del archivo de audio que deseas reproducir.

Controles básicos de audio

Después de crear un objeto 'Audio', podemos controlar su reproducción y otras propiedades utilizando los métodos y propiedades disponibles.

play(): inicia la reproducción del audio.
pause: pausa la reproducción del audio.
currentTime: propiedad que devuelve o establece la posición actual de reproducción del audio, en segundos.
volume: propiedad que devuelve o establece el nivel de volumen del audio, variando de 0 a 1.
Ejemplo de uso de los métodos del objeto 'Audio':

const audioElement = new Audio('ruta/del/archivo-de-audio.mp3');

audioElement.play(); // Inicia la reproducción
audioElement.pause(); // Pausa la reproducción
audioElement.currentTime = 10; // Se desplaza a los 10 segundos del audio
audioElement.volume = 0.5; // Establece el volumen a la mitad (50%)
COPIA EL CÓDIGO
Recuerda que la reproducción de audio en páginas web puede resultar intrusiva para algunos usuarios, por lo tanto, úsala con moderación y siempre proporciona controles de volumen y opciones de pausa a los visitantes de tu sitio.



En el proyecto Fokus, estamos utilizando algunas de las propiedades más conocidas para acceder a elementos en el DOM, como classList y innerHTML, sin embargo, existen otras igualmente importantes.

¿Vamos a conocerlas?

Propiedad parentNode

La propiedad parentNodese utiliza para acceder al nodo padre de un elemento en el DOM. A través de ella, podemos navegar por el árbol del DOM hacia el nodo padre del elemento actual.

Ejemplo de uso:

Supongamos que tenemos el siguiente código HTML:

<div id="container">
  <p>Este es un párrafo</p>
</div>

Ahora, podemos usar parentNode para acceder al elemento padre del párrafo:

const paragraph = document.querySelector('p');
const parentElement = paragraph.parentNode;

console.log(parentElement.id); // Salida: "container"

Propiedad childNodes

La propiedad childNodes se utiliza para acceder a todos los nodos hijos de un elemento en el DOM. Retorna una lista de nodos, incluyendo nodos de texto y elementos HTML.

Ejemplo de uso:

Considerando el mismo HTML del ejemplo anterior, podemos usar childNodes para obtener todos los nodos hijos del elemento con el ID "container":

const container = document.getElementById('container');
const childNodes = container.childNodes;

console.log(childNodes.length); // Salida: 1 (el nodo de texto "\n  " se considera un nodo hijo)
console.log(childNodes[0].nodeName); // Salida: "#text"
console.log(childNodes[1].nodeName); // Salida: "P"

Propiedad nextElementSibling

La propiedad nextElementSibling permite acceder al siguiente hermano (nodo adyacente) de un elemento en el DOM.

Ejemplo de uso:

Consideremos el siguiente HTML:

<ul>
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>

Ahora, podemos usar nextElementSibling para acceder al siguiente hermano de un elemento </li> :

const item1 = document.querySelector('li:first-child');
const item2 = item1.nextElementSibling;

console.log(item2.textContent); // Salida: "Item 2"

Propiedad previousElementSibling

La propiedad previousElementSibling similar a nextElementSibling , pero permite acceder al hermano anterior (nodo adyacente) de un elemento en el DOM.

Ejemplo de uso:

Continuando con el ejemplo anterior, vamos a usar previousElementSibling para acceder al hermano anterior del elemento </li> que seleccionamos:

const item3 = document.querySelector('li:last-child');
const item2 = item3.previousElementSibling;

console.log(item2.textContent); // Salida: "Item 2"

Con estas propiedades, es posible navegar, acceder y modificar elementos HTML en una página web, haciendo que la manipulación del DOM sea una herramienta poderosa para los desarrolladores web.

Es importante seguir practicando y explorando el DOM para profundizar tu conocimiento y habilidades en JavaScript.